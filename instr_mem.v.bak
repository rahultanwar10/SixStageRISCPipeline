module instr_mem (  
	input     		[15:0]  pc,  
	output wire    [15:0]  instruction );  

	wire [3:0] rom_addr = pc[4:1];  
	reg [15:0] rom[15:0];  
	//Sa  Sb  Dest
	initial begin  			 //Ra  Rb  Rc	
	rom[0]  = 16'b0001_001_010_011_0_00; // R3 = R1 + R2 = 5
	rom[1]  = 16'b0001_000_011_101_0_10; // R5 = R3 + R0 = 6 if cy = 1
	rom[2]  = 16'b0000_110_100_111111; //R6 = R4+FFFF = 4, cy = 1 
	rom[3]  = 16'b0001_010_011_101_0_10; //R5 = R3+R2 = 8 
	rom[4]  = 16'b0001_000_011_101_0_01; //R5 = R0 + R3 if z=1 (R5=8) 
	rom[5]  = 16'b0001_101_011_000_111110; //R5 = R0 +FFFE = 0, z = 1 
	rom[6]  = 16'b0001_000_011_101_0_01; //R5 = R0+R3 = 6 
	rom[7]  = 16'b0010_000_010_110_0_00; //R6= R0 nand R2 = 7 
	rom[8]  = 16'b0001_101_000_111110; //R5 = R0 + FFFE = 0, z =1
	rom[9]  = 16'b0010_000_011_101_0_01; //R5 = R0 nand R3 = 6 
	rom[10] = 16'b0001_110_000_111111; // R6 = R0 + FFFF = 0, c = z =1 
	rom[11] = 16'b0010_010_011_101_0_10; // R5 = R3 nand R2 = 6 
	rom[12] = 16'b0001_000_001_101_0_11; // R5 = <<R0 + R1 = 4 
	rom[13] = 16'b0011_101_000_000_111; // lhi : R5 = 0380
	rom[14] = 16'b0101_010_110_000001; // mem(R6+1) = R2 = 3
	rom[15] = 16'b0100_101_110_000_001; // R5 = mem(8) = 3
	end  
	assign instruction = (pc[15:0] < 32 )? rom[rom_addr[3:0]]: 16'd0;  
 endmodule