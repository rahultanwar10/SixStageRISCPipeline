module instruction_decoder(instruction, reg_a, reg_b, reg_c, alu_b, reg_write_en, datamem_write_en, datamem_read_en, mem_alu, alu_op);
	input [15:0] instruction;
	output reg [2:0] reg_a, reg_b, reg_c;
	output reg reg_write_en, datamem_write_en, datamem_read_en, mem_alu;
	output reg [5:0] alu_op;			//alu_op[5:4]- operation(add[00], nand[01], sub[10]), alu_op[3] - carry set, alu_op[2] - zero set, alu_op[1] - check carry, alu_op[0] - check zero
	output reg [1:0] alu_b;
	
	wire [5:0] alu_in;
	
	always@(*) begin
		reg_a = instruction[11:9];
		reg_b = instruction[8:6];
		reg_c = instruction[5:3];
		
	end
	
	assign alu_in = {instruction[15:12],instruction[1:0]};
	
	always@(alu_in) begin
		casex(alu_in)
			6'b000100 : begin
				alu_b = 2'b01;
				reg_write_en = 1'b1;
				datamem_read_en = 1'b0;
				datamem_write_en = 1'b0;
				mem_alu = 1'b1;
				alu_op = 6'b001100;
			end
			
			6'b000110 : begin
				alu_b = 2'b01;
				reg_write_en = 1'b1;
				datamem_read_en = 1'b0;
				datamem_write_en = 1'b0;
				mem_alu = 1'b1;
				alu_op = 6'b001110;
			end
			
			6'b000101 : begin
				alu_b = 2'b01;
				reg_write_en = 1'b1;
				datamem_read_en = 1'b0;
				datamem_write_en = 1'b0;
				mem_alu = 1'b1;
				alu_op = 6'b001101;
			end
			
			6'b000111 : begin
				alu_b = 2'b00;
				reg_write_en = 1'b1;
				datamem_read_en = 1'b0;
				datamem_write_en = 1'b0;
				mem_alu = 1'b1;
				alu_op = 6'b001100;
			end
		endcase
	end
		
endmodule